//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.6.3.0 (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace NPS.ID.PublicApi.Models
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class OrderEntry 
    {
        /// <summary>The portfolio id of the current order</summary>
        [Newtonsoft.Json.JsonProperty("portfolioId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortfolioId { get; set; }
    
        /// <summary>The contract ids that the current order should be placed on. For limit orders, only one value is allowed, for custom block orders all the contracts that the block spans should be included</summary>
        [Newtonsoft.Json.JsonProperty("contractIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContractIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deliveryAreaId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DeliveryAreaId { get; set; }
    
        /// <summary>BUY/SELL</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderEntrySide Side { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clipSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ClipSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clipPriceChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ClipPriceChange { get; set; }
    
        /// <summary>LIMIT, ICEBERG, USER_DEFINED_BLOCK</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderEntryOrderType OrderType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UnitPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Quantity { get; set; }
    
        /// <summary>IOC, FOK, AON, NON, GTD, GFS</summary>
        [Newtonsoft.Json.JsonProperty("timeInForce", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderEntryTimeInForce TimeInForce { get; set; }
    
        /// <summary>“AON” (All or None): The order must be filled completely or not at all. The order stays in the order book until it is executed or removed by the system or user. This execution restriction can be used only in combination with User Defined Block Orders. “NON”: No restrictions.</summary>
        [Newtonsoft.Json.JsonProperty("executionRestriction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderEntryExecutionRestriction ExecutionRestriction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expireTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ExpireTime { get; set; }
    
        /// <summary>ACTI — Active, IACT — Closed, matched(will never be reopened), HIBE — Deactivated(can be reopened)</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderEntryState State { get; set; }
    
        /// <summary>UUID for the order, provided by the client to track their own orders</summary>
        [Newtonsoft.Json.JsonProperty("clientOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientOrderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderEntry>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class OrderEntryRequest 
    {
        /// <summary>Unique identifier for this request, provided by the client to track their own requests</summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        /// <summary>Should the message be completely rejected if only some of the entered orders cause errors.</summary>
        [Newtonsoft.Json.JsonProperty("rejectPartially", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RejectPartially { get; set; }
    
        /// <summary>List of orders</summary>
        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OrderEntry> Orders { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderEntryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderEntryRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderEntrySide
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderEntryOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "LIMIT")]
        LIMIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ICEBERG")]
        ICEBERG = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "USER_DEFINED_BLOCK")]
        USER_DEFINED_BLOCK = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderEntryTimeInForce
    {
        [System.Runtime.Serialization.EnumMember(Value = "IOC")]
        IOC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FOK")]
        FOK = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NON")]
        NON = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "GTD")]
        GTD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "GFS")]
        GFS = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderEntryExecutionRestriction
    {
        [System.Runtime.Serialization.EnumMember(Value = "AON")]
        AON = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "NON")]
        NON = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderEntryState
    {
        [System.Runtime.Serialization.EnumMember(Value = "PENDING")]
        PENDING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ACTI")]
        ACTI = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HIBE")]
        HIBE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "IACT")]
        IACT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "REJECTED")]
        REJECTED = 4,
    
    }
}