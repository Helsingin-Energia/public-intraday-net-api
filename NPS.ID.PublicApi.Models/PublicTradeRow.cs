//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.6.3.0 (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace NPS.ID.PublicApi.Models
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class PublicTradeLeg 
    {
        /// <summary>OWN_BUY, OWN_SELL - the leg (order) is placed by current user and is on Buy or Sell side, respectively. COMPANY_BUY, COMPANY_SELL - the order was placed by different user from same Company.Order is on Buy or Sell side, respectively. OTHER - the order was placed by different company than user's.</summary>
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicTradeLegOwnership Ownership { get; set; }
    
        /// <summary>Contract Id for the order</summary>
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractId { get; set; }
    
        /// <summary>Buy or Sell</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicTradeLegSide Side { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UnitPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deliveryAreaId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DeliveryAreaId { get; set; }
    
        /// <summary>true if leg is the aggressor, null if the information is unavailable (for XBID trades)</summary>
        [Newtonsoft.Json.JsonProperty("aggressor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Aggressor { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PublicTradeLeg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublicTradeLeg>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class PublicTradeRow 
    {
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        /// <summary>Trade ID</summary>
        [Newtonsoft.Json.JsonProperty("tradeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TradeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tradeTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TradeTime { get; set; }
    
        /// <summary>COMPLETED - the trade is completed, CANCELLED - the trade is cancelled.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicTradeRowState State { get; set; }
    
        /// <summary>Basic data about orders participated in the trade</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PublicTradeLeg> Legs { get; set; }
    
        /// <summary>Currency code</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventSequenceNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EventSequenceNo { get; set; }
    
        /// <summary>A flag that indicates if this trade should no longer be visible on the market (old trade).</summary>
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deleted { get; set; }
    
        /// <summary>A medium length display name for the contract.</summary>
        [Newtonsoft.Json.JsonProperty("mediumDisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediumDisplayName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PublicTradeRow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublicTradeRow>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum PublicTradeLegOwnership
    {
        [System.Runtime.Serialization.EnumMember(Value = "OWN_BUY")]
        OWN_BUY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OWN_SELL")]
        OWN_SELL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "COMPANY_BUY")]
        COMPANY_BUY = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "COMPANY_SELL")]
        COMPANY_SELL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "OTHER")]
        OTHER = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum PublicTradeLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum PublicTradeRowState
    {
        [System.Runtime.Serialization.EnumMember(Value = "COMPLETED")]
        COMPLETED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DISPUTED")]
        DISPUTED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NOT_CANCELLED")]
        NOT_CANCELLED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 3,
    
    }
}