//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.6.3.0 (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace NPS.ID.PublicApi.Models
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorCode ErrorCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class OrderExecutionEntry 
    {
        [Newtonsoft.Json.JsonProperty("eventSequenceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventSequenceNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marketId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revisionNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RevisionNo { get; set; }
    
        /// <summary>Id of the previous order in this modification chain. When an order is modified and its priority changes, or partially matched, a new order Id is assigned.</summary>
        [Newtonsoft.Json.JsonProperty("previousOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousOrderId { get; set; }
    
        /// <summary>The original order id in this modification chain.</summary>
        [Newtonsoft.Json.JsonProperty("originalOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalOrderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }
    
        /// <summary>UUID for the order, provided by the client to track their own orders</summary>
        [Newtonsoft.Json.JsonProperty("clientOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientOrderId { get; set; }
    
        /// <summary>The portfolio id of the current order</summary>
        [Newtonsoft.Json.JsonProperty("portfolioId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortfolioId { get; set; }
    
        /// <summary>The contract ids for current order</summary>
        [Newtonsoft.Json.JsonProperty("contractIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContractIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deliveryAreaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DeliveryAreaId { get; set; }
    
        /// <summary>BUY/SELL</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderExecutionEntrySide? Side { get; set; }
    
        /// <summary>LIMIT, ICEBERG, USER_DEFINED_BLOCK</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderExecutionEntryOrderType? OrderType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UnitPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Quantity { get; set; }
    
        /// <summary>IOC, FOK, AON, NON, GTD, GFS</summary>
        [Newtonsoft.Json.JsonProperty("timeInForce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderExecutionEntryTimeInForce? TimeInForce { get; set; }
    
        /// <summary>If timeInForce is set to GTD (Good Till Date), the expireTime will determine when the order expires</summary>
        [Newtonsoft.Json.JsonProperty("expireTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpireTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        /// <summary>ACTI — Active, IACT — Closed, matched(will never be reopened), HIBE — Deactivated(can be reopened)</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderExecutionEntryState? State { get; set; }
    
        /// <summary>Action</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderExecutionEntryAction? Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clipSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ClipSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clipPriceChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ClipPriceChange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("remainingQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RemainingQuantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Error> Errors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderExecutionEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderExecutionEntry>(data);
        }
    }
    
    /// <summary>In response to an order creation or modification request described in Creating and modifying orders and for any order updates, the Intraday Platform will send an Order Execution Report message.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public partial class OrderExecutionReport 
    {
        /// <summary>Unique identifier for this request, provided by the client to track their own requests</summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        /// <summary>Member ID</summary>
        [Newtonsoft.Json.JsonProperty("memberId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberId { get; set; }
    
        /// <summary>Technical field about message originator.</summary>
        [Newtonsoft.Json.JsonProperty("errorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderExecutionReportErrorType? ErrorType { get; set; }
    
        /// <summary>An array of objects that contain fields errorCode and errorMessage.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Error> Errors { get; set; }
    
        /// <summary>Order execution entries</summary>
        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OrderExecutionEntry> Orders { get; set; }
    
        /// <summary>Last modification time (status change) of data</summary>
        [Newtonsoft.Json.JsonProperty("updatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrderExecutionReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderExecutionReport>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum ErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "MISSING_REQUIRED_FIELD")]
        MISSING_REQUIRED_FIELD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ILLEGAL_FIELD")]
        ILLEGAL_FIELD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_OUT_OF_RANGE")]
        FIELD_OUT_OF_RANGE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_FORMAT_INVALID")]
        FIELD_FORMAT_INVALID = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ITEM_NOT_FOUND")]
        ITEM_NOT_FOUND = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ACCESS_MODE_VIOLATION")]
        ACCESS_MODE_VIOLATION = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "THIRD_PARTY")]
        THIRD_PARTY = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderExecutionEntrySide
    {
        [System.Runtime.Serialization.EnumMember(Value = "BUY")]
        BUY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SELL")]
        SELL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderExecutionEntryOrderType
    {
        [System.Runtime.Serialization.EnumMember(Value = "LIMIT")]
        LIMIT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ICEBERG")]
        ICEBERG = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "USER_DEFINED_BLOCK")]
        USER_DEFINED_BLOCK = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderExecutionEntryTimeInForce
    {
        [System.Runtime.Serialization.EnumMember(Value = "IOC")]
        IOC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FOK")]
        FOK = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "NON")]
        NON = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "GTD")]
        GTD = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "GFS")]
        GFS = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderExecutionEntryState
    {
        [System.Runtime.Serialization.EnumMember(Value = "PENDING")]
        PENDING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ACTI")]
        ACTI = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "HIBE")]
        HIBE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "IACT")]
        IACT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "REJECTED")]
        REJECTED = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderExecutionEntryAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "USER_ADDED")]
        USER_ADDED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "USER_HIBERNATED")]
        USER_HIBERNATED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "USER_MODIFIED")]
        USER_MODIFIED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "USER_DELETED")]
        USER_DELETED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_HIBERNATED")]
        SYSTEM_HIBERNATED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_MODIFIED")]
        SYSTEM_MODIFIED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_DELETED")]
        SYSTEM_DELETED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "PARTIAL_EXECUTION")]
        PARTIAL_EXECUTION = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "FULL_EXECUTION")]
        FULL_EXECUTION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ICEBERG_SLICE_ADDED")]
        ICEBERG_SLICE_ADDED = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.3.0")]
    public enum OrderExecutionReportErrorType
    {
        [System.Runtime.Serialization.EnumMember(Value = "NPM")]
        NPM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PRE_TRADE")]
        PRE_TRADE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "MW")]
        MW = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "LTS")]
        LTS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "XBID")]
        XBID = 5,
    
    }
}